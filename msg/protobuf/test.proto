syntax="proto2";
package msg;

// sample type
enum TestType {
	TYPE_1 = 0;
	TYPE_2 = 1;
	TYPE_3 = 2;
}

// Error type
enum ErrorCode {
	ERR_SUCCESS = 0;
	ERR_LOGIN_FAIL = 1;
	ERR_ARGUMENT_FAIL = 2;
}

enum Msg_Id {
	Login_Req = 1;			// 로그인
	Login_Ans = 2;

	Enter_Ch_Req = 3;		// 채널 입장
	Enter_Ch_Ans = 4;

	Enter_Rm_Req = 5;		// 방 입장
	Enter_Rm_Ans = 6;

	Ping_Req = 11;			// 핑 체크
	Pong_Ans = 12;

	Relay_Req = 101;		// 릴레이 
	Relay_Ans = 102;
	Relay_Not = 103;		// 릴레이 통보
}


// sample struct
message TestMessage {

	enum SmallType {
		NORMAL = 0;
		HARD = 1;
		HELL = 2;
	}
	
	required string testString = 1;
	required uint32 testUint32 = 2;
	required SmallType testSmallType = 3;	
	optional TestType testTestType = 4 [default = TYPE_1];
	required bool testBool = 5;
	required int32 testInt32 = 6;
	optional uint64 testUint64 = 7;
	optional float testFloat = 8;
}


// sample mseeage
message LoginReq {
	required string id = 1;
}

message LoginAns {
	required ErrorCode err = 1;

	optional uint32 id = 2;
	optional string name = 3;
	optional uint32 platform = 4;
	optional uint32 gem = 5;
	optional uint32 gold = 6;
	optional string secKey = 7;
}

message EnterChReq {
	required uint32 chNo = 1;		// 채널 넘버(0: 자동 선택)
}

message EnterChAns {
	required ErrorCode err = 1;	
}

message EnterRmReq {
	required uint32 rmNo = 1;		// 방 넘버(0: 자동 선택, 1 ~ )
}

message EnterRmAns {
	required ErrorCode err = 1;	
}


message RelayReq {
	required uint32 rmNo = 1;		// 방 넘버(0: 자동 선택, 1 ~ )
	optional string data = 2;
}

message RelayAns {
	required ErrorCode err = 1;	
}

message RelayNot {
	required uint32 rmNo = 1;		// 방 넘버(0: 자동 선택, 1 ~ )
	optional string data = 2;
}